#!/usr/bin/env bash

###############
## Variables ##
###############

# Arch specific variables (packages)
source vars/arch-vars

# Current user
username=$1

# Whether to install and setup ufw firewall
setup_ufw=true

###############
## Functions ##
###############

# Check, if firewall tool is enabled
 _check_firewall_service () {
    if command -v $2 &> /dev/null; then
        if systemctl is-active --quiet $1; then
            setup_ufw=false
            echo "[SETUP_INFO] : Service $1 is already installed and enabled. Check its rules manually after this scripts has run."; sleep 6
        fi
    fi
}

# Check, if a package is installed
_pkg_is_installed () {
    check="$(sudo pacman -Qs "$1" | grep "local" | grep "$1 ");"
    if [ -n "${check}" ]; then
        return 0 # true
    else
        return 1 # false
    fi
}

# Backup config directory, if it already exists, and stow config
_config_setup () {
    echo "[SETUP_INFO] : Setting up $1 configuration..."; sleep 2
    if [ -d "$HOME/.config/$1" ]; then
        if [ -d "$HOME/.config/$1.bak" ]; then
            read -p"Backup of $HOME/.config/$1 directory already exists. Do you want to remove it and create a new one? [y/N]" -n 1 -r
            if [[ "$REPLY" =~ ^[Yy]$ ]]; then
                rm -rf $HOME/.config/$1.bak
                mv $HOME/.config/$1 $HOME/.config/$1.bak
            fi
        else
            mv $HOME/.config/$1 $HOME/.config/$1.bak
            echo "[SETUP_INFO] : Found existing configuration directory for $1. Backed it up as $HOME/.config/$1.bak."; sleep 4
        fi
    fi
    echo "[SETUP_INFO] : Linking $1 configuration to $HOME/.config with stow..."; sleep 3
    stow -vRt $HOME $1
}

#######################
## ARCH SETUP SCRIPT ##
#######################

echo "[SETUP_INFO] : Setting up environment for an arch based distribution."; sleep 3

# Syncing package databases and upgrading packages
echo "[SETUP_INFO] : Syncing package databases and upgrading system packages with pacman..."; sleep 3
sudo pacman -Syu --noconfirm
echo "[SETUP_INFO] : Syncing package databases and upgrading system packages with yay..."; sleep 3
yay -Syu --noconfirm

# Firewall
echo "[SETUP_INFO] : Checking, if there's an existing firewall service running..."; sleep 3
_check_firewall_service "ufw" "ufw"
_check_firewall_service "nftables" "nft"
_check_firewall_service "firewalld" "firewalld-cmd"
if $setup_ufw; then
    echo "[SETUP_INFO] : Installing ufw and setting up firewall..."; sleep 3
    if _pkg_is_installed "ufw"; then
        sudo pacman -S --noconfirm ufw
    else
        echo "[SETUP_INFO] : Firewall tool ufw already installed..."; sleep 2
    fi
    echo "[SETUP_INFO] : Enabling firewall tool ufw..."; sleep 2
    sudo systemctl enable ufw
    echo "[SETUP_INFO] : Starting firewall tool ufw..."; sleep 2
    sudo systemctl start ufw
fi

# Workspace and dotfiles
if [ -d "$HOME/Workspace" ]; then
    echo "[SETUP_INFO] : Workspace directory exists in ~/Workspace."; sleep 3
else
    echo "[SETUP_INFO] : Creating workspace directory as ~/Workspace..."; sleep 3
    mkdir $HOME/Workspace
fi
echo "[SETUP_INFO] : Cloning dotfiles repository to workspace..."; sleep 3
if [ -d "$HOME/Workspace/dotfiles" ]; then
    echo "[SETUP_INFO] : Repository dotfiles already cloned to workspace."; sleep 3
else
    git clone https://github.com/Aapok0/dotfiles.git $HOME/Workspace/dotfiles
fi

# Move to dotfiles directory for stow
echo "[SETUP_INFO] : Moving to dotfiles directory for stow..."; sleep 3
cd $HOME/Workspace/dotfiles

# Install and setup display manager
if [ -f "/etc/systemd/system/display-manager.service" ]; then
    display_manager="$(grep 'ExecStart=' /etc/systemd/system/display-manager.service | awk -F'/' '{print $NF}')"
    if [ $display_manager != "lightdm" ]; then
        if _pkq_is_installed "lightdm"; then
            echo "[SETUP_INFO] : Installing display manager lightdm..."; sleep 3
            sudo pacman -S --noconfirm lightdm
        else
            echo "[SETUP_INFO] : Display manager lightdm already installed..."; sleep 2
        fi
        echo "[SETUP_INFO] : Disabling display manager $display_manager..."; sleep 2
        sudo systemctl disable $display_manager
        echo "[SETUP_INFO] : Enabling display manager lightdm..."; sleep 2
        sudo systemctl enable lightdm
    else
        if ! sudo systemctl is-enabled lightdm; then
            echo "[SETUP_INFO] : Enabling display manager lightdm..."; sleep 2
            sudo systemctl enable lightdm
        fi
    fi
else
    if _pkq_is_installed "lightdm"; then
        echo "[SETUP_INFO] : Installing display manager lightdm..."; sleep 3
        sudo pacman -S --noconfirm lightdm
    else
        echo "[SETUP_INFO] : Display manager lightdm already installed..."; sleep 2
    fi
    echo "[SETUP_INFO] : Enabling display manager lightdm..."; sleep 2
    sudo systemctl enable lightdm
fi

# Install ZSH
echo "[SETUP_INFO] : Installing terminal emulator ZSH..."; sleep 3
if _pkq_is_installed "zsh"; then
    sudo pacman -S --noconfirm zsh
else
    echo "[SETUP_INFO] : Terminal emulator ZSH already installed..."; sleep 2
fi
echo "[SETUP_INFO] : Installing plugins, prompt theme, fzf-git and font for ZSH..."; sleep 3
if [ -d "$HOME/Workspace/dotfiles/zsh/.config/zsh/plugins/fast-syntax-highlighting" ]; then
    echo "[SETUP_INFO] : Plugin Fast Syntax Highlighting already installed."; sleep 2
else
    git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git $HOME/Workspace/dotfiles/zsh/.config/zsh/plugins/fast-syntax-highlighting
fi
if [ -d "$HOME/Workspace/dotfiles/zsh/.config/zsh/plugins/zsh-autosuggestions" ]; then
    echo "[SETUP_INFO] : Plugin ZSH Autosuggestions already installed."; sleep 2
else
    git clone https://github.com/zsh-users/zsh-autosuggestions.git $HOME/Workspace/dotfiles/zsh/.config/zsh/plugins/zsh-autosuggestions
fi
if [ -d "$HOME/Workspace/dotfiles/zsh/.config/zsh/plugins/zsh-completions" ]; then
    echo "[SETUP_INFO] : Plugin ZSH Completions already installed."; sleep 2
else
    git clone https://github.com/zsh-users/zsh-completions.git $HOME/Workspace/dotfiles/zsh/.config/zsh/plugins/zsh-completions
fi
if [ -d "$HOME/Workspace/dotfiles/zsh/.config/zsh/themes/powerlevel10k" ]; then
    echo "[SETUP_INFO] : Prompt theme Powerlevel10k already installed."; sleep 2
else
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $HOME/Workspace/dotfiles/zsh/.config/zsh/themes/powerlevel10k
fi
if [ -d "$HOME/Workspace/dotfiles/zsh/.config/zsh/tools/fzf-git.sh" ]; then
    echo "[SETUP_INFO] : Tool fzf-git already installed."; sleep 2
else
    git clone https://github.com/junegunn/fzf-git.sh.git $HOME/Workspace/dotfiles/zsh/.config/zsh/tools/fzf-git.sh
fi
if _pkq_is_installed "ttf-meslo-nerd-font-powerlevel10k"; then
    yay -S --answerclean Installed --answerdiff None --noconfirm ttf-meslo-nerd-font-powerlevel10k
else
    echo "[SETUP_INFO] : Font MesloLGS NF already installed..."; sleep 2
fi

# Install basic packages
echo "[SETUP_INFO] : Installing basic packages with pacman..."; sleep 3
for pkg in "${basic_packages[@]}"; do
    if _pkq_is_installed "$pkg"; then
        echo -e "\n[SETUP_INFO] : Installing $pkg...\n"; sleep 2
        sudo pacman -S --noconfirm "$pkg"
    else
        echo "[SETUP_INFO] : Package $pkg already installed..."; sleep 2
    fi
done
echo "[SETUP_INFO] : Installing basic packages with yay..."; sleep 3
for pkg in "${basic_packages_yay[@]}"; do
    if _pkq_is_installed "$pkg"; then
        echo -e "\n[SETUP_INFO] : Installing $pkg...\n"; sleep 2
        yay -S --answerclean Installed --answerdiff None --noconfirm "$pkg"
    else
        echo "[SETUP_INFO] : Package $pkg already installed..."; sleep 2
    fi
done

# Setup ZSH
_config_setup "zsh"
echo "[SETUP_INFO] : Switching shell to ZSH..."; sleep 3
change_shell="$(chsh -s $(which zsh) $username)"
if echo $change_shell | grep "Shell changed."; then
    echo "[SETUP_INFO] : Switched user $username's shell to ZSH."; sleep 3
else
    echo $change_shell
    echo "[SETUP_ERROR] : Failed to switch $username's shell to ZSH. The user's shell most likely already is ZSH."; sleep 3
fi

# Install nvm, activate nvm and install node
echo "[SETUP_INFO] : Installing nvm and node..."; sleep 3
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | sudo bash
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
nvm install node

# Install tfswitch
echo "[SETUP_INFO] : Installing tfswitch..."; sleep 3
curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | sudo bash

# Setup bat
_config_setup "bat"

# Setup kitty
_config_setup "kitty"

# Setup neovim
_config_setup "nvim"

# Setup tmux
_config_setup "tmux"
echo "[SETUP_INFO] : Installing tmux plugin manager..."; sleep 3
if [ -d "$HOME/Workspace/dotfiles/tmux/.config/tmux/plugins/tpm" ]; then
    echo "[SETUP_INFO] : tmux plugin manager (tpm) already installed."; sleep 2
else
    git clone https://github.com/tmux-plugins/tpm $HOME/Workspace/dotfiles/tmux/.config/tmux/plugins/tpm
fi
echo [SETUP_INFO] : "Linking tmux tools to /usr/local/bin..."; sleep 3
stow -vRt $HOME tmux-tools

# Install i3 and dependencies (and create Screenshots dir)
echo "[SETUP_INFO] : Installing i3 related packages with pacman..."; sleep 3
for pkg in "${i3_packages[@]}"; do
    if _pkq_is_installed "$pkg"; then
        echo -e "\n[SETUP_INFO] : Installing $pkg...\n"; sleep 2
        sudo pacman -S --noconfirm "$pkg"
    else
        echo "[SETUP_INFO] : Package $pkg already installed..."; sleep 2
    fi
done
echo "[SETUP_INFO] : Installing i3 related packages with yay..."; sleep 3
for pkg in "${i3_packages_yay[@]}"; do
    if _pkq_is_installed "$pkg"; then
        echo -e "\n[SETUP_INFO] : Installing $pkg...\n"; sleep 2
        yay -S --answerclean Installed --answerdiff None --noconfirm "$pkg"
    else
        echo "[SETUP_INFO] : Package $pkg already installed..."; sleep 2
    fi
done

# Setup gtk
_config_setup "gtk-3.0"
_config_setup "gtk-4.0"

# Setup i3
_config_setup "i3"

# Setup dunst
_config_setup "dunst"

# Setup rofi
_config_setup "rofi"

# Setup picom
_config_setup "picom"

# Move back to script directory
echo "[SETUP_INFO] : Moving back to script directory..."; sleep 3
cd -

# Create screenshot directory
if [ -d "$HOME/Screenshots" ]; then
    echo "[SETUP_INFO] : Screenshots directory exists in ~/Screenshots."; sleep 3
else
    echo "[SETUP_INFO] : Creating directory for screenshots..."; sleep 3
    mkdir $HOME/Screenshots
fi

# Install apps
echo "[SETUP_INFO] : Installing apps with pacman..."; sleep 3
for app in "${apps[@]}"; do
    if _pkq_is_installed "$app"; then
        echo -e "\n[SETUP_INFO] : Installing $app...\n"; sleep 2
        sudo pacman -S --noconfirm "$app"
    else
        echo "[SETUP_INFO] : Application $app already installed..."; sleep 2
done
echo "[SETUP_INFO] : Installing i3 packages with yay..."; sleep 3
for app in "${apps_yay[@]}"; do
    if _pkq_is_installed "$app"; then
        echo -e "\n[SETUP_INFO] : Installing $app...\n"; sleep 2
        yay -S --answerclean Installed --answerdiff None --noconfirm "$app"
    else
        echo "[SETUP_INFO] : Application $app already installed..."; sleep 2
done
